# DSA
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

const int N=1e5;
int n ; 
string p="",s;

template <class T>
class Stack 
{   
  public:

  	T a[N];
  	int top=-1;

  	void push(T x){

  		if(top==N-1)
  			cout<<"Stack full"<<"\n";
  		else 
  		  {
  		  	top++; 
  		  	a[top]=x;
  		  }
  	}

  	void pop(){

  		if(top==-1)
  			cout<<"Stack empty"<<"\n";
  		else 
  		{
  			a[top]='\0';
  			top--;

  		}
  	}

  	T peek(){

  		return a[top];

  	}

  	void print(){

  		if(top==-1)
  			cout<<"Stack empty"<<"\n";

  		else{

  		for (int i = 0; i <=top; ++i)
  		{
  			cout<<a[i]<<" ";
  		}

  		cout<<"\n";
  		}
  	}

  	int size(){
  		return top+1;
  	}

  	bool isempty(){
  		if(top==-1)
  			return 1; 
  		else 
  		    return 0;
  	}

  	bool isfull(){
  		if(top==n-1)
  			return 1;
  		else 
  			return 0;
  	}


	
};


///BODMAS

int prec(char ch) {
   if(ch == '+' || ch == '-') {
      return 1;              //Precedence of + or - is 1
   }else if(ch == '*' || ch == '/') {
      return 2;            //Precedence of * or / is 2
   }else if(ch == '^') {
      return 3;            //Precedence of ^ is 3
   }else {
      return 0;
   }
}




void solve(){


		Stack<char>st;
		st.push('#'); 
		cin>>s; 

		for (int i = 0; i < s.size(); ++i)
		{
			if(s[i]>='0' && s[i]<='9')
				p+=s[i];
			else {

				  if(s[i]=='(')
				  	st.push(s[i]);
				  else if(s[i] == '^')
            st.push('^');

				  else if(s[i]==')'){
				  	while(st.peek()!='#' && st.peek()!='(' ){
				  		p+=st.peek(); 
				  		st.pop();

				  	}

				  	st.pop();
				  }

				  else{

				  	if(prec(s[i])>st.peek())
				  		{ st.push(s[i]);
				  	  }
				  	else{ 

				  	  while(st.peek() != '#' && prec(s[i]) <= prec(st.peek())) {
               p+= st.peek();    
               st.pop();
            }
            st.push(s[i]);
				    }

			    }

			  }

			  //cout<<p<<"\n";
			}

					while(st.peek() != '#') {
		      p += st.peek();       
		      st.pop();
          }

         cout<<p<<"\n";
}



int main(){

	solve();
	//eval();
  

}
